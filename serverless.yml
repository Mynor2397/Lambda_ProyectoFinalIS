# service: lambda-textract-proyecto
service: lambda-proyecto

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: default
  environment:
    CONTRATOS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        - "sqs:ListQueues"
        - "s3:*"
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "*"

  exclude:
    - test/**

functions:
  textract:
    handler: api/handler.contratos
    memorySize: 500
    description: Extrae el texto de la imagen
    events:
     - http:
        path: textract
        method: post
        cors: true
  uploadfile:
    handler: api/handler.uploadfile
    memorySize: 500
    description: Sube el archivo al bucket S3
    events:
     - http:
        path: uploadfile
        method: post
        cors: true
  getallelements:
    handler: api/reports.getallelements
    description: Trae todos los registros de la base de datos
    events:
     - http: 
        path: report
        method: get
        cors: true 
  sqsRDSMysql: 
    handler: api/audit.auditSQS
    description: Encola los datos de auditoria para mysql
    events: 
     - http: 
        path: sqsaudit
        method: post
        cors: true
  queueProcessor:
    handler: api/audit.SaveOnMysql
    timeout: 30
    events: 
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSAudit
              - Arn



resources:
  Resources:
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: filesbonilla
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
              AllowedOrigins:
              - "*"
              AllowedHeaders:
              - "*"
    ContratosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CONTRATOS_TABLE}
    SQSAudit:
      Type: 'AWS::SQS::Queue'  
      Properties:
        QueueName: "audit"
        